/**
 * @preserve
 * Micro async script loader.
 * Puts a function named `microload` in the window namespace.
 * Usage:

     microload('/script_1.js', 'script_2.js', ['dependancy_1.js', 'dependee_1.js'], function(){
       // Do something once done.
     });
 
 * The `microload` function accepts strings and arrays. The last argument can be a callback.
 * Strings are loaded in parallel. Arrays of strings are loaded in succession (these are good for dependencies).
 * 
 * The loader also protects you from loading the same script twice, for example like this:
     
     microload("/script.js", "/another_script.js");
     microload("/script.js", "/yet_another_script.js");
 *
**/
!function(){function e(e,t){var o;e in n?n[e].push(t):(".css"===e.substr(-4)?(o=document.createElement("link"),o.rel="stylesheet",o.async=!0,o.href=e):(o=document.createElement("script"),o.type="text/javascript",o.async=!0,o.src=e),o.onload=o.onreadystatechange=function(){var t,a=n[e];if(delete n[e],o.readyState&&"complete"!==o.readyState&&"loaded"!==o.readyState)console&&console.log("Microload encountered an error.");else for(o.onload=o.onreadystatechange=null;t=a.shift();)t()},n[e]=[t],document.head.appendChild(o))}var n={};window.microload=function(){function n(){0===--a.loading&&"function"==typeof a&&a()}var t,o=0,a=arguments[arguments.length-1];for("function"!=typeof a&&(a={}),void 0===a.loading&&(a.loading=0);t=arguments[o++];)"string"==typeof t?(a.loading++,e(t,n)):"object"==typeof t&&"function"==typeof t.pop&&!function(t){var o=t.shift();return o?(++a.loading,void e(o,function(){t.length&&--a.loading,microload(t,a)})):n()}(t.slice())}}();